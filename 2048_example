package com.javarush.games.game2048;

import com.javarush.engine.cell.*;


public class Game2048 extends Game{
    private static final int SIDE = 4;
    private int score;
    private int[][] gameField = new int[SIDE][SIDE];
    private boolean isGameStopped = false;
    
    @Override
    public void initialize(){
        setScreenSize(SIDE, SIDE);
        createGame(); 
        drawScene();
    }
    
    @Override
    public void onKeyPress(Key key){
        if (!isGameStopped){
            if (!canUserMove()){
                gameOver();
            }else if(key == Key.LEFT){
                moveLeft();
                drawScene();
            } else if(key == Key.RIGHT){
                moveRight();
                drawScene();
            } else if(key == Key.UP){
                moveUp();
                drawScene();
            } else if(key == Key.DOWN){
                moveDown();
                drawScene();
            }
        } else if (isGameStopped){
            if(key == Key.SPACE){
                isGameStopped = false;
                score = 0;
                setScore(score);
                createGame();
                drawScene();
            }
        }
    }
    
    private void createGame(){
        gameField = new int[SIDE][SIDE];
        createNewNumber();
        createNewNumber();
    }
    
    private void drawScene(){
        for (int x = 0; x < SIDE; x++){
            for(int y = 0; y < SIDE; y++){
                setCellColoredNumber(x, y, gameField[y][x]);
            }
        }
    }
    
    private void createNewNumber(){
        if (getMaxTileValue() == 2048){
            win();
        }
        int randomNum = getRandomNumber(10);
        int x = getRandomNumber(SIDE);
        int y = getRandomNumber(SIDE);
        if (gameField[x][y] == 0){
            if (randomNum == 9){
                gameField[x][y]= 4;
            } else 
                gameField[x][y] = 2;            
        } else 
            createNewNumber();
    }
    
    private void setCellColoredNumber(int x, int y, int value){
        if (value > 0){
            setCellValueEx(x, y, getColorByValue(value), Integer.toString(value));
        } else 
            setCellValueEx(x, y, getColorByValue(value), "");
    }
    
    private Color getColorByValue(int num){
        switch (num){
        case 2:
            return Color.DARKBLUE;
        case 4:
            return Color.DARKVIOLET;
        case 8:
            return Color.DARKORCHID;
        case 16:
            return Color.STEELBLUE;
        case 32:
            return Color.GREEN;
        case 64:
            return Color.MEDIUMSEAGREEN;
        case 128:
            return Color.MEDIUMSPRINGGREEN;
        case 256:
            return Color.LIMEGREEN;
        case 512:
            return Color.YELLOWGREEN;
        case 1024:
            return Color.ORANGERED;
        case 2048:
            return Color.TOMATO;
        default:
            return Color.WHITE;
        }
    }
    
    private boolean compressRow(int[] row){
        boolean result = false;
        int index = 0;
        for(int x = 0; x < row.length; x++){
            if (row[x] > 0 && row[index] == 0){ 
                row[index] = row[x];
                row[x] = 0;
                index++;
                result = true;
            } if (row[index] > 0) {
                    index++;
                }
        }
        return result;
    }
    
    private boolean mergeRow(int[] row){
        boolean result = false;
        for (int i = 0; i < row.length - 1; i++) {
            if (row[i] != 0 && row[i] == row[i + 1]) {
                row[i] += row[i + 1];
                row[i + 1] = 0;
                result = true;
                score += row[i];
                setScore(score);
            }
        }
        return result;
    }
    
    
    
    private void moveLeft(){
        boolean isNewNumberNeeded = false;
        for (int[] row : gameField) {
            boolean wasCompressed = compressRow(row);
            boolean wasMerged = mergeRow(row);
            if (wasMerged) {
                compressRow(row);
            }
            if (wasCompressed || wasMerged) {
                isNewNumberNeeded = true;
            }
        }
        if (isNewNumberNeeded) {
            createNewNumber();
        }
    }
    
    private void moveRight(){
        rotateClockwise();
        rotateClockwise();
        moveLeft();
        rotateClockwise();
        rotateClockwise();
    }
    
    private void moveUp(){
        rotateClockwise();
        rotateClockwise();
        rotateClockwise();
        moveLeft();
        rotateClockwise();
    }
    
    private void moveDown(){
        rotateClockwise();
        moveLeft();
        rotateClockwise();
        rotateClockwise();
        rotateClockwise();
    }
    
    private void rotateClockwise(){
        int arr[][] = new int[SIDE][SIDE];
        for (int x = 0; x < SIDE; x++){
            for(int y = 0; y < SIDE; y++){
                arr[x][y] = gameField[SIDE - y - 1][x];
            }
        }
        gameField = arr;
    }
    
    private int getMaxTileValue(){
        int max = gameField[0][0];
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE; x++) {
                if (gameField[y][x] > max) {
                    max = gameField[y][x];
                }
            }
        }
        return max;
    }
    
    private boolean canUserMove(){
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE; x++) {
                if (gameField[y][x] == 0) {
                    return true;
                } else if (y < SIDE - 1 && gameField[y][x] == gameField[y + 1][x]) {
                    return true;
                } else if ((x < SIDE - 1) && gameField[y][x] == gameField[y][x + 1]) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private void win(){
        showMessageDialog(Color.NONE, "YOU WIN", Color.GREEN, 75);
        isGameStopped = true;
    }
    
    private void gameOver(){
        isGameStopped = true;
        showMessageDialog(Color.NONE, "GAME OVER", Color.RED, 75);
    }
}
